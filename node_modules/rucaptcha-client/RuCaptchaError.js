'use strict';

let errorCodes = {
	'ERROR_WRONG_USER_KEY': {id: 1, message: 'Значение параметра key указано в неверном формате, ключ должен содержать 32 символа.'},
	'ERROR_KEY_DOES_NOT_EXIST': {id: 2, message: 'Указанный ключ не существует.'},
	'ERROR_ZERO_BALANCE': {id: 3, message: 'На счету недостаточно средств.'},
	'ERROR_PAGEURL': {id: 4, message: 'Параметр pagurl не задан в запросе.'},
	'ERROR_NO_SLOT_AVAILABLE': {id: 5, message: 'Очередь капч, которые еще не распределены на работников, слишком длинная'},
	'ERROR_ZERO_CAPTCHA_FILESIZE': {id: 6, message: 'Размер изображения менее 100 байт.'},
	'ERROR_TOO_BIG_CAPTCHA_FILESIZE': {id: 7, message: 'Размер изображения более 100 Кбайт.'},
	'ERROR_WRONG_FILE_EXTENSION': {id: 8, message: 'Файл имеет неподдерживаемое расширение. Допустимые расширения: jpg, jpeg, gif, png.'},
	'ERROR_IMAGE_TYPE_NOT_SUPPORTED': {id: 9, message: 'Сервер не может опознать тип файла.'},
	'ERROR_IP_NOT_ALLOWED': {id: 10, message: 'Запрос отправлен с IP адреса, который не добавлен в список разрешенных IP адресов.'},
	'IP_BANNED': {id: 11, message: 'IP адрес заблокирован за чрезмерное количество попыток авторизации с неверным ключем авторизации.'},
	'ERROR_CAPTCHAIMAGE_BLOCKED': {id: 12, message: 'Было отправлено изображение, которые помечено в базе как нераспознаваемое.'},
	'ERROR_YOUR_IP_IS_BANNED_BY_GOOGLE': {id: 13, message: 'Приенимо только к Audio ReCaptcha V2. Ошибка означает, что Google забанил IP адрес и выдает аудиозапись об этом вместо капчи.'},
	'ERROR_CAPTCHA_UNSOLVABLE': {id: 14, message: 'Три работника не смогли решить капчу, либо ответ не был получен в течении 90 секунд.'},
	'ERROR_WRONG_ID_FORMAT' : {id: 15, message: 'Неправильный формат ID'},
	'ERROR_WRONG_CAPTCHA_ID' : {id: 16, message: 'Вы отправили неверный ID капчи.'},
	'ERROR_BAD_DUPLICATES' : {id: 17, message: 'Было предпринято максимальное число попыток разгадать капчу, но требуемое количество совпадений достигнуто не было.'},
	'REPORT_NOT_RECORDED' : {id: 15, message: 'Убедитесь, что вы отправляете жалобы только в случае неправильного решения.'}
};

class RuCaptchaError extends Error {
	/**
	 * @param {String} code
	 * @throws {TypeError}
	 */
	constructor(code) {
		if (!code in errorCodes) throw TypeError('Неизвестный код ошибки.');
		super(errorCodes[code].message, errorCodes[code].id);
	}

	/**
	 * Проверяет, является ли строка сообщение об ошибке
	 * @param {String} str
	 * @return {RuCaptchaError|null}
	 */
	static isRuCaptchaError(str) {
		try {
			return new RuCaptchaError(str);
		} catch (e) {
			return null;
		}
	}
}

module.exports = RuCaptchaError;